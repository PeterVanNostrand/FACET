{"version":3,"file":"bundle.js","sources":["src/download.js","src/namespaces.js","src/setInlineStyles.js","src/preprocess.js","src/d3-save-svg.js","src/values.js","src/utilities.js","src/sideBar.js","src/linguisticDisplay.js","src/explanationTable.js","src/numericDisplay.js","src/visualDisplay.js","src/index.js"],"sourcesContent":["export default function (svgInfo, filename) {\r\n  window.URL = (window.URL || window.webkitURL);\r\n  var blob = new Blob(svgInfo.source, {type: 'text\\/xml'});\r\n  var url = window.URL.createObjectURL(blob);\r\n  var body = document.body;\r\n  var a = document.createElement('a');\r\n\r\n  body.appendChild(a);\r\n  a.setAttribute('download', filename + '.svg');\r\n  a.setAttribute('href', url);\r\n  a.style.display = 'none';\r\n  a.click();\r\n  a.parentNode.removeChild(a);\r\n\r\n  setTimeout(function() {\r\n    window.URL.revokeObjectURL(url);\r\n  }, 10);\r\n}\r\n","export default {\r\n  svg: 'http://www.w3.org/2000/svg',\r\n  xhtml: 'http://www.w3.org/1999/xhtml',\r\n  xlink: 'http://www.w3.org/1999/xlink',\r\n  xml: 'http://www.w3.org/XML/1998/namespace',\r\n  xmlns: 'http://www.w3.org/2000/xmlns/',\r\n};\r\n","import prefix from './namespaces';\r\n\r\nexport default function (svg) {\r\n\r\n  // add empty svg element\r\n  var emptySvg = window.document.createElementNS(prefix.svg, 'svg');\r\n  window.document.body.appendChild(emptySvg);\r\n  var emptySvgDeclarationComputed = window.getComputedStyle(emptySvg);\r\n\r\n  // hardcode computed css styles inside svg\r\n  var allElements = traverse(svg);\r\n  var i = allElements.length;\r\n  while (i--) {\r\n    explicitlySetStyle(allElements[i]);\r\n  }\r\n\r\n  emptySvg.parentNode.removeChild(emptySvg);\r\n\r\n  function explicitlySetStyle(element) {\r\n    var cSSStyleDeclarationComputed = window.getComputedStyle(element);\r\n    var i;\r\n    var len;\r\n    var key;\r\n    var value;\r\n    var computedStyleStr = '';\r\n\r\n    for (i = 0, len = cSSStyleDeclarationComputed.length; i < len; i++) {\r\n      key = cSSStyleDeclarationComputed[i];\r\n      value = cSSStyleDeclarationComputed.getPropertyValue(key);\r\n      // CUSTOM adding custom application for SVG font size\r\n      if (key == \"font-size\" && (element.tagName == \"text\" || element.tagName == \"tspan\")) {\r\n        d3.select(element).attr(\"font-size\", value);\r\n      }\r\n      if (value !== emptySvgDeclarationComputed.getPropertyValue(key)) {\r\n        // Don't set computed style of width and height. Makes SVG elmements disappear.\r\n        if ((key !== 'height') && (key !== 'width')) {\r\n          computedStyleStr += key + ':' + value + ';';\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    element.setAttribute('style', computedStyleStr);\r\n  }\r\n\r\n  function traverse(obj) {\r\n    var tree = [];\r\n    tree.push(obj);\r\n    visit(obj);\r\n    function visit(node) {\r\n      if (node && node.hasChildNodes()) {\r\n        var child = node.firstChild;\r\n        while (child) {\r\n          if (child.nodeType === 1 && child.nodeName != 'SCRIPT') {\r\n            tree.push(child);\r\n            visit(child);\r\n          }\r\n\r\n          child = child.nextSibling;\r\n        }\r\n      }\r\n    }\r\n\r\n    return tree;\r\n  }\r\n}\r\n","import setInlineStyles from './setInlineStyles';\r\nimport prefix from './namespaces';\r\n\r\nexport default function (svg) {\r\n  svg.setAttribute('version', '1.1');\r\n\r\n  // removing attributes so they aren't doubled up\r\n  svg.removeAttribute('xmlns');\r\n  svg.removeAttribute('xlink');\r\n\r\n  // These are needed for the svg\r\n  if (!svg.hasAttributeNS(prefix.xmlns, 'xmlns')) {\r\n    svg.setAttributeNS(prefix.xmlns, 'xmlns', prefix.svg);\r\n  }\r\n\r\n  if (!svg.hasAttributeNS(prefix.xmlns, 'xmlns:xlink')) {\r\n    svg.setAttributeNS(prefix.xmlns, 'xmlns:xlink', prefix.xlink);\r\n  }\r\n\r\n  setInlineStyles(svg);\r\n\r\n  var xmls = new XMLSerializer();\r\n  var source = xmls.serializeToString(svg);\r\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\r\n  var rect = svg.getBoundingClientRect();\r\n  var svgInfo = {\r\n    top: rect.top,\r\n    left: rect.left,\r\n    width: rect.width,\r\n    height: rect.height,\r\n    class: svg.getAttribute('class'),\r\n    id: svg.getAttribute('id'),\r\n    childElementCount: svg.childElementCount,\r\n    source: [doctype + source],\r\n  };\r\n\r\n  return svgInfo;\r\n}\r\n","import { getImageBase64, isDataURL } from './convertRaster';\r\nimport download from './download';\r\nimport prefix from './namespaces';\r\nimport preprocess from './preprocess';\r\n\r\n// MODIFIED FROM https://github.com/edeno/d3-save-svg/tree/gh-pages\r\n// CHANGES TAGGED WITH \"CUSTOM\"\r\n\r\nexport function save(svgElement, config) {\r\n    if (svgElement.nodeName !== 'svg' || svgElement.nodeType !== 1) {\r\n        throw 'Need an svg element input';\r\n    }\r\n\r\n    var config = config || {};\r\n    var svgInfo = preprocess(svgElement, config);\r\n    var defaultFileName = getDefaultFileName(svgInfo);\r\n    var filename = config.filename || defaultFileName;\r\n    var svgInfo = preprocess(svgElement);\r\n    download(svgInfo, filename);\r\n}\r\n\r\nexport function embedRasterImages(svg) {\r\n\r\n    var images = svg.querySelectorAll('image');\r\n    [].forEach.call(images, function (image) {\r\n        var url = image.getAttribute('href');\r\n\r\n        // Check if it is already a data URL\r\n        if (!isDataURL(url)) {\r\n            // convert to base64 image and embed.\r\n            getImageBase64(url, function (err, d) {\r\n                image.setAttributeNS(prefix.xlink, 'href', 'data:image/png;base64,' + d);\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n}\r\n\r\nfunction getDefaultFileName(svgInfo) {\r\n    var defaultFileName = 'untitled';\r\n    if (svgInfo.id) {\r\n        defaultFileName = svgInfo.id;\r\n    } else if (svgInfo.class) {\r\n        defaultFileName = svgInfo.class;\r\n    } else if (window.document.title) {\r\n        defaultFileName = window.document.title.replace(/[^a-z0-9]/gi, '-').toLowerCase();\r\n    }\r\n\r\n    return defaultFileName;\r\n}\r\n","\r\nexport const rect_values = {\r\n    fill: \"white\",\r\n    round: 5,\r\n    stroke_width: 2,\r\n    stroke: \"black\",\r\n}\r\n\r\nexport const expl_colors = {\r\n    desired: \"blue\",\r\n    undesired: \"red\",\r\n    altered_bad: \"red\",\r\n    altered_good: \"blue\",\r\n    unaltered: \"#939393\"\r\n}\r\n\r\nexport const ExplanationTypes = Object.freeze({\r\n    Region: \"region\",\r\n    Example: \"example\"\r\n})\r\n\r\nexport const ExampleGeneration = Object.freeze({\r\n    Nearest: \"nearest\",\r\n    Centered: \"centered\"\r\n})\r\n\r\nexport const FeatureOrders = Object.freeze({\r\n    Dataset: \"dataset\",\r\n    LargestChange: \"largestchange\"\r\n})\r\n\r\nexport const FEATURE_ORDER = FeatureOrders.Dataset\r\nexport const OFFSET_UNSCALED = 0.0001;\r\nexport const GENERATION_TYPE = ExampleGeneration.Nearest;\r\nexport const CURRENCY_DIGITS = 0;","import { CURRENCY_DIGITS, ExampleGeneration, FEATURE_ORDER, FeatureOrders, GENERATION_TYPE } from \"./values\";\r\n\r\nexport function wrap(text, width) {\r\n    // function for creating multi line wrapped text taken from the below\r\n    // https://stackoverflow.com/questions/24784302/wrapping-text-in-d3\r\n    var nlines = 1;\r\n    text.each(function () {\r\n        var text = d3.select(this),\r\n            words = text.text().split(/\\s+/).reverse(),\r\n            word,\r\n            line = [],\r\n            lineNumber = 0,\r\n            lineHeight = 1.5, // ems\r\n            x = text.attr(\"x\"),\r\n            y = text.attr(\"y\"),\r\n            dy = 0, //parseFloat(text.attr(\"dy\")),\r\n            tspan = text.text(null)\r\n                .append(\"tspan\")\r\n                .attr(\"x\", x)\r\n                .attr(\"y\", y)\r\n                .attr(\"dy\", dy + \"em\");\r\n        while (word = words.pop()) {\r\n            line.push(word);\r\n            tspan.text(line.join(\" \"));\r\n            if (tspan.node().getComputedTextLength() > width) {\r\n                line.pop();\r\n                tspan.text(line.join(\" \"));\r\n                line = [word];\r\n                nlines += 1\r\n                tspan = text.append(\"tspan\")\r\n                    .attr(\"x\", x)\r\n                    .attr(\"y\", y)\r\n                    .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\r\n                    .text(word)\r\n            }\r\n        }\r\n    });\r\n    return nlines;\r\n}\r\n\r\nexport function unscale(scaled_value, feature_id, dataset_details) {\r\n    var feature_value = scaled_value\r\n    if (dataset_details[\"normalized\"]) {\r\n        var feature_range = dataset_details[\"max_values\"][feature_id] - dataset_details[\"min_values\"][feature_id]\r\n        var feature_value = (feature_value * feature_range) + dataset_details[\"min_values\"][feature_id];\r\n    }\r\n    return feature_value\r\n}\r\n\r\nconst formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: CURRENCY_DIGITS,\r\n    maximumFractionDigits: CURRENCY_DIGITS,\r\n});\r\n\r\nexport function pretty_value(feature_value, feature_name, readable) {\r\n    var value_text = \"\";\r\n    var trimmed_value = parseFloat(feature_value).toFixed(readable[\"feature_decimals\"][feature_name])\r\n    if (readable[\"feature_units\"][feature_name] == \"$\") {\r\n        value_text += formatter.format(trimmed_value);\r\n    }\r\n    else {\r\n        value_text += trimmed_value + \" \" + readable[\"feature_units\"][feature_name];\r\n    }\r\n    return value_text\r\n}\r\n\r\nexport function argsort(arr) {\r\n    var len = arr.length;\r\n    var indices = new Array(len);\r\n    for (var i = 0; i < len; ++i) indices[i] = i;\r\n    indices.sort(function (a, b) { return arr[a] < arr[b] ? -1 : arr[a] > arr[b] ? 1 : 0; });\r\n    return indices;\r\n}\r\n\r\n/** A function which computes and returns the size of change along each feature and a list of indices for largest to smallest change order */\r\nexport function feature_dists_order(instance, region) {\r\n    const n_features = Object.keys(instance).length;\r\n    var feature_distances = Array(n_features).fill(0)\r\n    for (let i = 0; i < n_features; i++) {\r\n        var feature_id = \"x\" + i\r\n        var feature_value = instance[feature_id]\r\n        var lower_bound = parseFloat(region[feature_id][0])\r\n        var upper_bound = parseFloat(region[feature_id][1])\r\n\r\n        if (feature_value < lower_bound) {\r\n            feature_distances[i] = (lower_bound - feature_value)\r\n        } else if (feature_value > upper_bound) {\r\n            feature_distances[i] = (feature_value - upper_bound)\r\n        }\r\n    }\r\n    var idx_order;\r\n    if (FEATURE_ORDER == FeatureOrders.Dataset) {\r\n        idx_order = Array.from(Array(n_features).keys())\r\n    } else if (FEATURE_ORDER == FeatureOrders.LargestChange) {\r\n        idx_order = argsort(feature_distances).reverse();\r\n    }\r\n    return [feature_distances, idx_order];\r\n}\r\n\r\nexport function create_example(instance_val, lower_val, upper_val, offset) {\r\n    var example_val;\r\n    var region_half_width = (upper_val - lower_val) / 2;\r\n    if (region_half_width < offset || GENERATION_TYPE == ExampleGeneration.Centered) {\r\n        offset = region_half_width; // use half the range width instead\r\n    }\r\n\r\n    // if the value is too low\r\n    if (instance_val <= lower_val) {\r\n        example_val = lower_val + offset; // increase it to fall in the range\r\n    }\r\n    // if the value is too hight\r\n    else if (instance_val >= upper_val) {\r\n        example_val = upper_val - offset // decrease it to fall in the range\r\n    }\r\n\r\n    return example_val;\r\n}\r\n\r\n/* Clamps the given value to the semantic min/max value for that feature. If no meaningful semantic min/max value is availible it uses the dataset min/max values*/\r\nexport function clamp_value(value, feature_id, readable, dataset_details) {\r\n    var clampped_value = value;\r\n    const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n\r\n    // clamp to the low end\r\n    var feature_min = readable[\"semantic_min\"][feature_name];\r\n    if (!feature_min) { feature_min = dataset_details[\"min_values\"][feature_id]; }\r\n    clampped_value = Math.max(clampped_value, feature_min);\r\n\r\n    // clamp to the high end\r\n    var feature_max = readable[\"semantic_max\"][feature_name]; // use the semantic min\r\n    if (!feature_max) { feature_max = dataset_details[\"max_values\"][feature_id]; }\r\n    clampped_value = Math.min(clampped_value, feature_max);\r\n\r\n    return clampped_value;\r\n}","import { pretty_value, unscale, wrap } from \"./utilities.js\";\r\nimport { rect_values } from \"./values.js\";\r\n\r\nexport const sideBar = () => {\r\n    let width;\r\n    let height;\r\n    let x;\r\n    let y;\r\n    let explanation;\r\n    let dataset_details;\r\n    let readable;\r\n\r\n    const my = (selection) => {\r\n        // add a sidebar box for details\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"sidebar\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .attr(\"rx\", rect_values.round)\r\n            .attr(\"ry\", rect_values.round)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", rect_values.stroke_width)\r\n            .attr(\"stroke-linejoin\", \"round\");\r\n\r\n        // STATUS label\r\n        const text_margin_left = 15;\r\n        const text_margin_top = 40;\r\n        selection.append(\"text\")\r\n            .text(\"STATUS\")\r\n            .attr(\"class\", \"header-text\")\r\n            .attr(\"x\", x + text_margin_left)\r\n            .attr(\"y\", y + text_margin_top)\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"font-size\", 20);\r\n\r\n        // dividing line properties\r\n        const line_width = 2;\r\n        const line_text_expand = 5;\r\n        const line_length = width - (text_margin_left * 2) + line_text_expand;\r\n        const line_x = x + text_margin_left - line_text_expand\r\n\r\n        // STATUS line\r\n        const status_line_y = y + text_margin_top + 10\r\n        selection.append(\"line\")\r\n            .attr(\"x1\", line_x)\r\n            .attr(\"x2\", line_x + line_length)\r\n            .attr(\"y1\", status_line_y)\r\n            .attr(\"y2\", status_line_y)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", line_width);\r\n\r\n        // status message\r\n        const center = x + text_margin_left + (width - 2 * text_margin_left) / 2\r\n        const reject_text = selection.append(\"text\")\r\n            .attr(\"x\", center)\r\n            .attr(\"y\", status_line_y + 30)\r\n            .attr(\"fill\", \"black\")\r\n            .text(\"Our algorithm has decided that your loan application should be\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"class\", \"feature-details\");\r\n        const n_reject_lines = wrap(reject_text, (width - 2 * text_margin_left))\r\n\r\n        const predicted_status_y = status_line_y + n_reject_lines * 45\r\n        selection.append(\"text\")\r\n            .text(readable[\"scenario_terms\"][\"undesired_outcome\"].toUpperCase())\r\n            .attr(\"x\", center)\r\n            .attr(\"y\", predicted_status_y)\r\n            .attr(\"id\", \"predicated-status\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n\r\n        // APPLICATION label\r\n        const application_label_y = predicted_status_y + text_margin_top\r\n        selection.append(\"text\")\r\n            .text(readable[\"scenario_terms\"][\"instance_name\"].toUpperCase())\r\n            .attr(\"class\", \"header-text\")\r\n            .attr(\"x\", x + text_margin_left)\r\n            .attr(\"y\", application_label_y)\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"font-size\", 20);\r\n\r\n        // APPLICATION line\r\n        const features_line_y = application_label_y + 10\r\n        selection.append(\"line\")\r\n            .attr(\"x1\", line_x)\r\n            .attr(\"x2\", line_x + line_length)\r\n            .attr(\"y1\", features_line_y)\r\n            .attr(\"y2\", features_line_y)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", line_width);\r\n\r\n        // APPLICATION FEATURE VALUE CONTENT\r\n        const text_offset = 25;\r\n        const instance = explanation[\"instance\"];\r\n        const n_features = Object.keys(instance).length\r\n        for (let i = 0; i < n_features; i++) {\r\n            // get the raw feature name and its formatted pretty equivalent\r\n            var feature_id = \"x\" + i // x0, x1, ...., xn\r\n            var feature_name = dataset_details[\"feature_names\"][feature_id]; // raw name e.g. applicant_income\r\n            var pretty_name = readable[\"pretty_feature_names\"][feature_name]; // formatted name e.g. Applicant Name\r\n\r\n            // get the the raw feature value and unscale it if needed\r\n            var feature_value = unscale(instance[feature_id], feature_id, dataset_details)\r\n\r\n            // format the value to a string and add unit signs\r\n            var value_text = pretty_value(feature_value, dataset_details[\"feature_names\"][feature_id], readable)\r\n\r\n            // display the feature name\r\n            selection.append(\"text\")\r\n                .text(pretty_name)\r\n                .attr(\"class\", \"feature-details\")\r\n                .attr(\"x\", x + text_margin_left)\r\n                .attr(\"y\", features_line_y + text_offset * (i + 1))\r\n                .attr(\"fill\", \"black\")\r\n\r\n            // display the formatted feature value\r\n            selection.append(\"text\")\r\n                .text(value_text)\r\n                .attr(\"class\", \"feature-details\")\r\n                .attr(\"x\", x + width - text_margin_left)\r\n                .attr(\"y\", features_line_y + text_offset * (i + 1))\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"text-anchor\", \"end\");\r\n        }\r\n    }\r\n\r\n    my.width = function (_) {\r\n        return arguments.length\r\n            ? ((width = +_), my)\r\n            : width;\r\n    };\r\n\r\n    my.height = function (_) {\r\n        return arguments.length\r\n            ? ((height = +_), my)\r\n            : height;\r\n    };\r\n\r\n    my.x = function (_) {\r\n        return arguments.length\r\n            ? ((x = +_), my)\r\n            : x;\r\n    };\r\n\r\n    my.y = function (_) {\r\n        return arguments.length\r\n            ? ((y = +_), my)\r\n            : y;\r\n    };\r\n\r\n    my.explanation = function (_) {\r\n        return arguments.length ? ((explanation = _), my) : explanation;\r\n    };\r\n\r\n    my.dataset_details = function (_) {\r\n        return arguments.length ? ((dataset_details = _), my) : dataset_details;\r\n    };\r\n\r\n    my.readable = function (_) {\r\n        return arguments.length ? ((readable = _), my) : readable;\r\n    };\r\n\r\n    return my;\r\n}","import { sideBar } from \"./sideBar.js\";\r\nimport { clamp_value, create_example, feature_dists_order, pretty_value, unscale } from \"./utilities.js\";\r\nimport { ExplanationTypes, OFFSET_UNSCALED, expl_colors, rect_values } from \"./values.js\";\r\n\r\nexport const liguisticDisplay = () => {\r\n    let width;\r\n    let height;\r\n    let explanation;\r\n    let dataset_details;\r\n    let readable;\r\n    let expl_type;\r\n\r\n    const my = (selection) => {\r\n        // extract explanation information\r\n        const n_features = Object.keys(dataset_details[\"feature_names\"]).length;\r\n        const instance = explanation[\"instance\"];\r\n        const region = explanation[\"region\"];\r\n        // add a bounding rectangle\r\n        const bbox_width = width - 20;\r\n        const bbox_height = height - 20;\r\n        const bbox_x = 10;\r\n        const bbox_y = 10;\r\n        const bbox_round = 3;\r\n        const bbox_stroke = \"black\";\r\n        const bbox_stroke_width = 0.5\r\n        const bbox_stroke_opacity = 0.4\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"bbox\")\r\n            .attr(\"width\", bbox_width)\r\n            .attr(\"id\", \"bbox\")\r\n            .attr(\"height\", bbox_height)\r\n            .attr(\"fill\", rect_values.fill)\r\n            .attr(\"x\", bbox_x)\r\n            .attr(\"y\", bbox_y)\r\n            .attr(\"rx\", bbox_round)\r\n            .attr(\"ry\", bbox_round)\r\n            .attr(\"stroke\", bbox_stroke)\r\n            .attr(\"stroke-width\", bbox_stroke_width)\r\n            .attr(\"stroke-opacity\", bbox_stroke_opacity)\r\n\r\n        // ####################################### SIDEBAR CONTENT #######################################\r\n\r\n        const sidebar_width_ratio = 0.33;\r\n        const sidebar_margin = 10;\r\n        const sidebar_width = bbox_width * sidebar_width_ratio;\r\n        const sidebar_height = bbox_height - (sidebar_margin * 2);\r\n        const sidebar_x = bbox_x + sidebar_margin;\r\n        const sidebar_y = bbox_y + sidebar_margin;\r\n        const sidebar = sideBar()\r\n            .width(sidebar_width)\r\n            .height(sidebar_height)\r\n            .x(sidebar_x)\r\n            .y(sidebar_y)\r\n            .explanation(explanation)\r\n            .dataset_details(dataset_details)\r\n            .readable(readable);\r\n        selection.call(sidebar);\r\n\r\n        // ####################################### FUNCTION LIBRARY #######################################\r\n\r\n        function get_feature_name(feature_i) {\r\n            const feature_id = \"x\" + feature_i;\r\n            const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n            const pretty_feature_name = readable[\"pretty_feature_names\"][feature_name];\r\n            return pretty_feature_name\r\n        }\r\n\r\n        function get_feature_between(feature_i, region) {\r\n            const feature_id = \"x\" + feature_i;\r\n            const feature_name = dataset_details[\"feature_names\"][feature_id]\r\n            var lower_value = unscale(region[feature_id][0], feature_id, dataset_details);\r\n            var upper_value = unscale(region[feature_id][1], feature_id, dataset_details);\r\n            lower_value = clamp_value(lower_value, feature_id, readable, dataset_details);\r\n            upper_value = clamp_value(upper_value, feature_id, readable, dataset_details);\r\n            return [lower_value, upper_value]\r\n        }\r\n\r\n        const case_format = \"allupper\"\r\n        function format_case(text) {\r\n            if (case_format == \"allupper\") {\r\n                return text.toUpperCase()\r\n            }\r\n            if (case_format == \"alllower\") {\r\n                return text.toLowerCase()\r\n            }\r\n        }\r\n\r\n        // ####################################### EXPLANATION BOX #######################################\r\n\r\n        // add a containing box for the explanation\r\n        const ebox_width_ratio = 1 - sidebar_width_ratio;\r\n        const ebox_width = (bbox_width * ebox_width_ratio) - 3 * sidebar_margin;\r\n        const ebox_height = bbox_height - (sidebar_margin * 2);\r\n        const ebox_x = bbox_x + (sidebar_width_ratio * bbox_width) + (2 * sidebar_margin);\r\n        const ebox_y = bbox_y + sidebar_margin;\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"ebox\")\r\n            .attr(\"width\", ebox_width)\r\n            .attr(\"height\", ebox_height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"x\", ebox_x)\r\n            .attr(\"y\", ebox_y)\r\n            .attr(\"rx\", rect_values.round)\r\n            .attr(\"ry\", rect_values.round)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", rect_values.stroke_width)\r\n            .attr(\"stroke-linejoin\", \"round\");\r\n\r\n        // ####################################### BUILD EXPLANATION TEXT #######################################\r\n\r\n        // compute the unscaled distance along each dimension and sort by it\r\n        const [feature_distances, idx_order] = feature_dists_order(instance, region);\r\n\r\n        // CREATE THE STARTING TEXT\r\n        var expl_text = Array(); // lets build an array for templated text\r\n        // ADD: Your <instance> would have been <desired outcome> rather than <undesired outcome> if your\r\n        const start_text = \"Your \" + readable[\"scenario_terms\"][\"instance_name\"].toLowerCase() + \" would have been\";\r\n        expl_text.push([start_text, \"black\"]);\r\n        expl_text.push([format_case(readable[\"scenario_terms\"][\"desired_outcome\"]), expl_colors.desired]);\r\n        expl_text.push([\"rather than\", \"black\"]);\r\n        expl_text.push([format_case(readable[\"scenario_terms\"][\"undesired_outcome\"]), expl_colors.undesired]);\r\n        expl_text.push([\"if your\", \"black\"]);\r\n\r\n        // ADD TEXT FOR ALTERED FEATURES\r\n        var n_feats_listed = 0;\r\n        for (let i = 0; i < n_features; i++) {\r\n            // for features in order of largest change\r\n            if (feature_distances[idx_order[i]] > 0) {\r\n                const feature_id = \"x\" + idx_order[i];\r\n                const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n                if (n_feats_listed > 0) {\r\n                    expl_text.push([\"and your\", \"black\"])\r\n                }\r\n                // ADD: <feature name> was between <good value low> and <good value high> rather than <bad value>\r\n                expl_text.push([format_case(get_feature_name(idx_order[i])) + \" was\", \"black\"]);\r\n                // get the instance and region values\r\n                const feature_value = unscale(instance[feature_id], feature_id, dataset_details);\r\n                const [lower_value, upper_value] = get_feature_between(idx_order[i], region);\r\n\r\n                if (expl_type == ExplanationTypes.Region) {\r\n                    expl_text.push([\"between\", \"black\"]);\r\n                    // format the value text neatly\r\n                    const lower_value_text = pretty_value(lower_value, feature_name, readable);\r\n                    const upper_value_text = pretty_value(upper_value, feature_name, readable);\r\n                    const range_text = lower_value_text + \" and \" + upper_value_text;\r\n                    expl_text.push([range_text, expl_colors.desired]);\r\n                }\r\n                else if (expl_type == ExplanationTypes.Example) {\r\n                    var offset = unscale(OFFSET_UNSCALED, feature_id, dataset_details);\r\n                    const example_val = create_example(feature_value, lower_value, upper_value, offset);\r\n                    const example_text = pretty_value(example_val, feature_name, readable)\r\n                    expl_text.push([example_text, expl_colors.desired]);\r\n                }\r\n\r\n                expl_text.push([\"rather than\", \"black\"])\r\n                expl_text.push([pretty_value(feature_value, feature_name, readable), expl_colors.undesired]);\r\n                n_feats_listed += 1; // number of altered features\r\n            }\r\n        }\r\n        // if unaltered feature remain add the below\r\n        if (n_feats_listed < n_features) {\r\n            expl_text.push([\", assuming all other features are the same\", \"black\"]);\r\n            // ADD TEXT FOR UNALTERED FEATURES\r\n            var in_paren = false\r\n            for (let i = 0; i < n_features; i++) {\r\n                if (feature_distances[idx_order[i]] == 0) {\r\n                    var feature_text = \"\";\r\n                    if (!in_paren) {\r\n                        feature_text += \"(\";\r\n                        in_paren = true;\r\n                    }\r\n                    feature_text += format_case(get_feature_name(idx_order[i]))\r\n                    const feature_id = \"x\" + idx_order[i];\r\n                    const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n                    const feature_value = unscale(instance[feature_id], feature_id, dataset_details);\r\n                    expl_text.push([feature_text, \"black\"]);\r\n\r\n                    var current_value_text;\r\n                    if (expl_type == ExplanationTypes.Region) {\r\n                        const [lower_value, upper_value] = get_feature_between(idx_order[i], region);\r\n                        const lower_value_text = pretty_value(lower_value, feature_name, readable);\r\n                        const upper_value_text = pretty_value(upper_value, feature_name, readable);\r\n                        const range_text = lower_value_text + \" and \" + upper_value_text;\r\n                        current_value_text = \"between \" + range_text;\r\n                    }\r\n                    else if (expl_type == ExplanationTypes.Example) {\r\n                        current_value_text = pretty_value(feature_value, feature_name, readable);\r\n                    }\r\n\r\n                    // var current_value_text = get_feature_between(idx_order[i]);\r\n                    if (i < (n_features - 1)) {  // if this is not the last feature add a semicolon\r\n                        current_value_text += \";\"\r\n                    }\r\n                    else { // if it is add a closing parenthesis\r\n                        current_value_text += \")\"\r\n                    }\r\n                    expl_text.push([current_value_text, \"black\"]);\r\n                }\r\n            }\r\n\r\n        }\r\n        // ADD TEXT FOR UNALTERED FEATURES\r\n        // for (let i = 0; i < n_features; i++) {\r\n        //     var feature_text = \"\";\r\n        //     if (!in_paren) {\r\n        //         feature_text += \"(\";\r\n        //         in_paren = true;\r\n        //     }\r\n        //     feature_text += format_case(get_feature_name(idx_order[i]))\r\n        //     const feature_id = \"x\" + idx_order[i];\r\n        //     const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n        //     const feature_value = unscale(instance[feature_id], feature_id, dataset_details);\r\n        //     expl_text.push([feature_text, \"black\"]);\r\n\r\n        //     var current_value_text;\r\n        //     if (expl_type == ExplanationTypes.Region) {\r\n        //         const [lower_value, upper_value] = get_feature_between(idx_order[i], region);\r\n        //         const lower_value_text = pretty_value(lower_value, feature_name, readable);\r\n        //         const upper_value_text = pretty_value(upper_value, feature_name, readable);\r\n        //         const range_text = lower_value_text + \" and \" + upper_value_text;\r\n        //         current_value_text = \"between \" + range_text;\r\n        //     }\r\n        //     else if (expl_type == ExplanationTypes.Example) {\r\n        //         current_value_text = pretty_value(feature_value, feature_name, readable);\r\n        //     }\r\n\r\n        //     // var current_value_text = get_feature_between(idx_order[i]);\r\n        //     if (i < (n_features - 1)) {  // if this is not the last feature add a semicolon\r\n        //         current_value_text += \";\"\r\n        //     }\r\n        //     else { // if it is add a closing parenthesis\r\n        //         current_value_text += \")\"\r\n        //     }\r\n        //     expl_text.push([current_value_text, \"black\"]);\r\n        //     i += 1;\r\n        // }\r\n\r\n        // ####################################### RENDER EXPLANATION TEXT #######################################\r\n\r\n        var combined_text = \"\";\r\n        for (let i = 0; i < expl_text.length; i++) {\r\n            combined_text += expl_text[i][0] + \" \"\r\n        }\r\n\r\n        // text box location\r\n        const etext_margin = 30;\r\n        const ebox_center_x = ebox_x + (ebox_width / 2)\r\n        const etext_x = ebox_x + etext_margin;\r\n        const etext_y = ebox_y + etext_margin + 40;\r\n        const textbox = selection.append(\"text\")\r\n            .attr(\"x\", etext_x)\r\n            .attr(\"y\", etext_y)\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"class\", \"feature-details\")\r\n            .text(null);\r\n        const n_expl_lines = render_textarray(textbox, expl_text, ebox_width - (2 * etext_margin));\r\n\r\n        /** Given an array of [<text element>, <color>] tuples, render the svg text with the right color wrapped to the given width adapted from wrap (https://stackoverflow.com/questions/24784302/wrapping-text-in-d3) */\r\n        function render_textarray(textbox, text_arr, width) {\r\n            var lineNumber = 0;\r\n            textbox.text(null); // clear the textbox\r\n            var debug_val = 0;\r\n\r\n            var entry;\r\n            const x = textbox.attr(\"x\");\r\n            const y = textbox.attr(\"y\");\r\n            const dy = 0; //parseFloat(text.attr(\"dy\")),\r\n            const lineHeight = 1.8;\r\n            var line_used_width = 0;\r\n            var tspan;\r\n            text_arr = text_arr.reverse()\r\n            var entry_num = 0;\r\n            const punctuation = [\",\", \".\", \"?\", \"!\", \";\", \"'\", \"\\\"\"]\r\n            while (entry = text_arr.pop()) { // for each entry in text_arr\r\n                var entry_words = entry[0].split(/\\s+/).reverse();\r\n                // add a tspan of the right color, include a space betweent words but not punctuation\r\n                if (line_used_width > 0 && !punctuation.includes(entry_words[entry_words.length - 1])) {\r\n                    line_used_width += 5;\r\n                }\r\n                var tspan = textbox.append(\"tspan\")\r\n                    .attr(\"x\", x)\r\n                    .attr(\"y\", y)\r\n                    .attr(\"dy\", lineNumber * lineHeight + dy + \"em\")\r\n                    .attr(\"dx\", line_used_width)\r\n                    .attr(\"fill\", entry[1]);\r\n                var word;\r\n                var line = [];\r\n                var tspan_width = 0;\r\n                while (word = entry_words.pop()) {\r\n                    // add the words of the entry to this tspan\r\n                    line.push(word);\r\n                    tspan.text(line.join(\" \"));\r\n                    // if that tspan gets wider than the acceptable width\r\n                    tspan_width = tspan.node().getComputedTextLength();\r\n                    if ((line_used_width + tspan_width) > width) {\r\n                        line.pop();\r\n                        tspan.text(line.join(\" \"));\r\n                        // add a new one\r\n                        lineNumber += 1\r\n                        tspan = textbox.append(\"tspan\")\r\n                            .attr(\"x\", x)\r\n                            .attr(\"y\", y)\r\n                            .attr(\"dy\", lineNumber * lineHeight + dy + \"em\")\r\n                            .text(word)\r\n                            .attr(\"fill\", entry[1])\r\n                        tspan_width = tspan.node().getComputedTextLength();\r\n                        line_used_width = 0;\r\n                        line = [word]\r\n                    }\r\n                }\r\n                line_used_width += tspan_width;\r\n            }\r\n            return lineNumber;\r\n        }\r\n    }\r\n\r\n    my.width = function (_) {\r\n        return arguments.length\r\n            ? ((width = +_), my)\r\n            : width;\r\n    };\r\n\r\n    my.height = function (_) {\r\n        return arguments.length\r\n            ? ((height = +_), my)\r\n            : height;\r\n    };\r\n\r\n    my.x = function (_) {\r\n        return arguments.length\r\n            ? ((x = +_), my)\r\n            : x;\r\n    };\r\n\r\n    my.y = function (_) {\r\n        return arguments.length\r\n            ? ((y = +_), my)\r\n            : y;\r\n    };\r\n\r\n    my.explanation = function (_) {\r\n        return arguments.length ? ((explanation = _), my) : explanation;\r\n    };\r\n\r\n    my.dataset_details = function (_) {\r\n        return arguments.length ? ((dataset_details = _), my) : dataset_details;\r\n    };\r\n\r\n    my.readable = function (_) {\r\n        return arguments.length ? ((readable = _), my) : readable;\r\n    };\r\n\r\n    my.expl_type = function (_) {\r\n        return arguments.length ? ((expl_type = _), my) : expl_type;\r\n    };\r\n\r\n    my.expl_type = function (_) {\r\n        return arguments.length ? ((expl_type = _), my) : expl_type;\r\n    };\r\n\r\n    return my;\r\n}","import { clamp_value, create_example, pretty_value, unscale } from \"./utilities.js\";\r\nimport { ExplanationTypes, OFFSET_UNSCALED, expl_colors } from \"./values.js\";\r\n\r\nexport const TableTypes = Object.freeze({\r\n    Application: \"application\",\r\n    Explanation: \"explanation\"\r\n})\r\n\r\nexport const explanationTable = () => {\r\n    let width;\r\n    let height;\r\n    let x;\r\n    let y;\r\n    let explanation;\r\n    let dataset_details;\r\n    let readable;\r\n    let expl_type;\r\n    let idx_order;\r\n    let feature_distances;\r\n    let table_type;\r\n\r\n    const my = (selection) => {\r\n        // table formatting values\r\n        const tr_stroke = \"black\"\r\n        const tr_stroke_width = 2\r\n        const tr_text_offset_x = width / 2\r\n        const tr_text_offset_y = height / 2\r\n        const table_row_offset = height\r\n        const tr_pad = 10;\r\n        const font_size = 16;\r\n\r\n        const instance = explanation[\"instance\"];\r\n        const region = explanation[\"region\"];\r\n        const n_features = Object.keys(instance).length\r\n\r\n        // add a header above the table\r\n        if (table_type == \"application\") {\r\n            var header_1 = readable[\"scenario_terms\"][\"instance_name\"];\r\n            var header_2 = readable[\"scenario_terms\"][\"undesired_outcome\"];\r\n            var header_2_color = expl_colors.undesired;\r\n        } else if (table_type == \"explanation\") {\r\n            var header_1 = \"Explanation\";\r\n            var header_2 = readable[\"scenario_terms\"][\"desired_outcome\"];\r\n            var header_2_color = expl_colors.desired;\r\n        }\r\n        var etable_header = selection.append(\"text\")\r\n            .attr(\"x\", x + width / 2)\r\n            .attr(\"y\", y - font_size / 2)\r\n            .attr(\"class\", \"feature-details\")\r\n            .attr(\"class\", \"table-header\")\r\n            .attr(\"font-size\", 16)\r\n            .attr(\"font-style\", \"bold\")\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"text-anchor\", \"middle\");\r\n        etable_header.append(\"tspan\")\r\n            .text(header_1 + \" (\")\r\n        etable_header.append(\"tspan\")\r\n            .text(header_2)\r\n            .attr(\"fill\", header_2_color);\r\n        etable_header.append(\"tspan\")\r\n            .text(\")\")\r\n            .attr(\"fill\", \"black\");\r\n        // create the table body\r\n        for (let i = 0; i < n_features; i++) {\r\n            // get the formatted feature name\r\n            const feature_id = \"x\" + idx_order[i];\r\n            const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n            const has_change = feature_distances[idx_order[i]] > 0\r\n            var pretty_feature_name = readable[\"pretty_feature_names\"][feature_name];\r\n            var value_text;\r\n            var value_color;\r\n            var label_color;\r\n\r\n            if (table_type == \"application\") {\r\n                // get the pretty feature value\r\n                const feature_val = unscale(instance[feature_id], feature_id, dataset_details);\r\n                value_text = pretty_value(feature_val, feature_name, readable);\r\n                // color labels and values based on feature difference\r\n                value_color = has_change ? expl_colors.altered_bad : expl_colors.unaltered\r\n                label_color = has_change ? \"black\" : expl_colors.unaltered\r\n            }\r\n            else if (table_type == \"explanation\") {\r\n                // get the upper and lower bound values\r\n                var lower_val = unscale(region[feature_id][0], feature_id, dataset_details);\r\n                var upper_val = unscale(region[feature_id][1], feature_id, dataset_details);\r\n                lower_val = clamp_value(lower_val, feature_id, readable, dataset_details);\r\n                upper_val = clamp_value(upper_val, feature_id, readable, dataset_details);\r\n\r\n                if (expl_type == ExplanationTypes.Region) {\r\n                    // format that text neatly\r\n                    const lower_val_text = pretty_value(lower_val, feature_name, readable);\r\n                    const upper_val_text = pretty_value(upper_val, feature_name, readable);\r\n                    value_text = lower_val_text + \" - \" + upper_val_text;\r\n                } else if (expl_type == ExplanationTypes.Example) {\r\n                    const feature_value = unscale(instance[feature_id], feature_id, dataset_details);\r\n                    var example_value = feature_value;\r\n                    if (has_change) {\r\n                        var offset = unscale(OFFSET_UNSCALED, feature_id, dataset_details);\r\n                        example_value = create_example(feature_value, lower_val, upper_val, offset);\r\n                    }\r\n                    value_text = pretty_value(example_value, feature_name, readable);\r\n                }\r\n\r\n                // choose label and value colors based on if the feature had to be changed\r\n                value_color = has_change ? expl_colors.altered_good : expl_colors.unaltered\r\n                label_color = has_change ? \"black\" : expl_colors.unaltered\r\n            }\r\n\r\n            // start a group for each table cell\r\n            var tr = selection.append(\"g\")\r\n            // draw the cell box\r\n            tr.append(\"rect\")\r\n                .attr(\"x\", x)\r\n                .attr(\"y\", y + (table_row_offset * i))\r\n                .attr(\"width\", width)\r\n                .attr(\"height\", height)\r\n                .attr(\"stroke\", tr_stroke)\r\n                .attr(\"stroke-width\", tr_stroke_width);\r\n            // add the feature label to the top-left of the box\r\n            tr.append(\"text\")\r\n                .text(pretty_feature_name)\r\n                .attr(\"x\", x + tr_pad)\r\n                .attr(\"y\", y + (table_row_offset * i) + tr_pad + (font_size / 2))\r\n                .attr(\"class\", \"feature-details\")\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"text-anchor\", \"start\")\r\n                .attr(\"fill\", label_color)\r\n                .attr(\"font-size\", 16);\r\n            // add the feature value to the center of the box\r\n            tr.append(\"text\")\r\n                .text(value_text)\r\n                .attr(\"x\", x + tr_text_offset_x)\r\n                .attr(\"y\", y + (table_row_offset * i) + tr_text_offset_y + font_size / 2)\r\n                .attr(\"class\", \"feature-details\")\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"fill\", value_color)\r\n                .attr(\"font-size\", 16);\r\n        }\r\n    }\r\n\r\n    my.width = function (_) {\r\n        return arguments.length\r\n            ? ((width = +_), my)\r\n            : width;\r\n    };\r\n\r\n    my.height = function (_) {\r\n        return arguments.length\r\n            ? ((height = +_), my)\r\n            : height;\r\n    };\r\n\r\n    my.x = function (_) {\r\n        return arguments.length\r\n            ? ((x = +_), my)\r\n            : x;\r\n    };\r\n\r\n    my.y = function (_) {\r\n        return arguments.length\r\n            ? ((y = +_), my)\r\n            : y;\r\n    };\r\n\r\n    my.explanation = function (_) {\r\n        return arguments.length ? ((explanation = _), my) : explanation;\r\n    };\r\n\r\n    my.dataset_details = function (_) {\r\n        return arguments.length ? ((dataset_details = _), my) : dataset_details;\r\n    };\r\n\r\n    my.readable = function (_) {\r\n        return arguments.length ? ((readable = _), my) : readable;\r\n    };\r\n\r\n    my.idx_order = function (_) {\r\n        return arguments.length ? ((idx_order = _), my) : idx_order;\r\n    };\r\n\r\n    my.feature_distances = function (_) {\r\n        return arguments.length ? ((feature_distances = _), my) : feature_distances;\r\n    };\r\n\r\n    my.table_type = function (_) {\r\n        return arguments.length ? ((table_type = _), my) : table_type;\r\n    };\r\n\r\n    my.expl_type = function (_) {\r\n        return arguments.length ? ((expl_type = _), my) : expl_type;\r\n    };\r\n\r\n    return my;\r\n}","import { TableTypes, explanationTable } from \"./explanationTable.js\";\r\nimport { sideBar } from \"./sideBar.js\";\r\nimport { feature_dists_order } from \"./utilities.js\";\r\nimport { rect_values } from \"./values.js\";\r\n\r\nexport const numericDisplay = () => {\r\n    let width;\r\n    let height;\r\n    let explanation;\r\n    let dataset_details;\r\n    let readable;\r\n    let expl_type;\r\n\r\n    const my = (selection) => {\r\n        // extract explanation information\r\n        const n_features = Object.keys(dataset_details[\"feature_names\"]).length;\r\n        const instance = explanation[\"instance\"];\r\n        const region = explanation[\"region\"];\r\n\r\n        // add a bounding rectangle\r\n        const bbox_width = width - 20;\r\n        const bbox_height = height - 20;\r\n        const bbox_x = 10;\r\n        const bbox_y = 10;\r\n        const bbox_round = 3;\r\n        const bbox_stroke = \"black\";\r\n        const bbox_stroke_width = 0.5\r\n        const bbox_stroke_opacity = 0.4\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"bbox\")\r\n            .attr(\"width\", bbox_width)\r\n            .attr(\"id\", \"bbox\")\r\n            .attr(\"height\", bbox_height)\r\n            .attr(\"fill\", rect_values.fill)\r\n            .attr(\"x\", bbox_x)\r\n            .attr(\"y\", bbox_y)\r\n            .attr(\"rx\", bbox_round)\r\n            .attr(\"ry\", bbox_round)\r\n            .attr(\"stroke\", bbox_stroke)\r\n            .attr(\"stroke-width\", bbox_stroke_width)\r\n            .attr(\"stroke-opacity\", bbox_stroke_opacity)\r\n            .attr(\"filter\", \"url(#dropshadow)\");\r\n\r\n        // ####################################### SIDEBAR CONTENT #######################################\r\n\r\n        const sidebar_width_ratio = 0.33;\r\n        const sidebar_margin = 10;\r\n        const sidebar_width = bbox_width * sidebar_width_ratio;\r\n        const sidebar_height = bbox_height - (sidebar_margin * 2);\r\n        const sidebar_x = bbox_x + sidebar_margin;\r\n        const sidebar_y = bbox_y + sidebar_margin;\r\n        const sidebar = sideBar()\r\n            .width(sidebar_width)\r\n            .height(sidebar_height)\r\n            .x(sidebar_x)\r\n            .y(sidebar_y)\r\n            .explanation(explanation)\r\n            .dataset_details(dataset_details)\r\n            .readable(readable);\r\n        selection.call(sidebar);\r\n\r\n\r\n        // ####################################### EXPLANATION CONTENT #######################################\r\n\r\n        // add a containing box for the explanation\r\n        const ebox_width_ratio = 1 - sidebar_width_ratio;\r\n        const ebox_width = (bbox_width * ebox_width_ratio) - 3 * sidebar_margin;\r\n        const ebox_height = bbox_height - (sidebar_margin * 2);\r\n        const ebox_x = bbox_x + (sidebar_width_ratio * bbox_width) + (2 * sidebar_margin);\r\n        const ebox_y = bbox_y + sidebar_margin;\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"ebox\")\r\n            .attr(\"width\", ebox_width)\r\n            .attr(\"height\", ebox_height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"x\", ebox_x)\r\n            .attr(\"y\", ebox_y)\r\n            .attr(\"rx\", rect_values.round)\r\n            .attr(\"ry\", rect_values.round)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", rect_values.stroke_width)\r\n            .attr(\"stroke-linejoin\", \"round\");\r\n\r\n        // compute the unscaled distance along each dimension\r\n        const [feature_distances, idx_order] = feature_dists_order(instance, region);\r\n\r\n        // table shape values\r\n        const tr_width = 200\r\n        const tr_height = 70\r\n        const table_margin = (ebox_width - (2 * tr_width)) / 3\r\n\r\n        // APPLICATION table\r\n        const text_margin_top = 40;\r\n        const atable_x_offset = table_margin\r\n        const atable_y = ebox_y + text_margin_top\r\n        const atable_x = ebox_x + atable_x_offset\r\n\r\n        const atable = explanationTable()\r\n            .width(tr_width)\r\n            .height(tr_height)\r\n            .x(atable_x)\r\n            .y(atable_y)\r\n            .explanation(explanation)\r\n            .dataset_details(dataset_details)\r\n            .readable(readable)\r\n            .expl_type(expl_type)\r\n            .idx_order(idx_order)\r\n            .feature_distances(feature_distances)\r\n            .table_type(TableTypes.Application);\r\n        selection.call(atable);\r\n\r\n        // EXPLANATION table\r\n        const etable_x_offset = (table_margin * 2) + tr_width\r\n        const etable_y = ebox_y + text_margin_top\r\n        const etable_x = ebox_x + etable_x_offset\r\n        const etable = explanationTable()\r\n            .width(tr_width)\r\n            .height(tr_height)\r\n            .x(etable_x)\r\n            .y(etable_y)\r\n            .explanation(explanation)\r\n            .dataset_details(dataset_details)\r\n            .readable(readable)\r\n            .expl_type(expl_type)\r\n            .idx_order(idx_order)\r\n            .feature_distances(feature_distances)\r\n            .table_type(TableTypes.Explanation);\r\n        selection.call(etable);\r\n    }\r\n\r\n    my.width = function (_) {\r\n        return arguments.length\r\n            ? ((width = +_), my)\r\n            : width;\r\n    };\r\n\r\n    my.height = function (_) {\r\n        return arguments.length\r\n            ? ((height = +_), my)\r\n            : height;\r\n    };\r\n\r\n    my.x = function (_) {\r\n        return arguments.length\r\n            ? ((x = +_), my)\r\n            : x;\r\n    };\r\n\r\n    my.y = function (_) {\r\n        return arguments.length\r\n            ? ((y = +_), my)\r\n            : y;\r\n    };\r\n\r\n    my.explanation = function (_) {\r\n        return arguments.length ? ((explanation = _), my) : explanation;\r\n    };\r\n\r\n    my.dataset_details = function (_) {\r\n        return arguments.length ? ((dataset_details = _), my) : dataset_details;\r\n    };\r\n\r\n    my.readable = function (_) {\r\n        return arguments.length ? ((readable = _), my) : readable;\r\n    };\r\n\r\n    my.expl_type = function (_) {\r\n        return arguments.length ? ((expl_type = _), my) : expl_type;\r\n    };\r\n\r\n    return my;\r\n}","import { sideBar } from \"./sideBar.js\";\r\nimport { clamp_value, create_example, feature_dists_order, pretty_value, unscale } from \"./utilities.js\";\r\nimport { ExplanationTypes, OFFSET_UNSCALED, expl_colors, rect_values } from \"./values.js\";\r\n\r\nexport const visualDisplay = () => {\r\n    let width;\r\n    let height;\r\n    let explanation;\r\n    let dataset_details;\r\n    let readable;\r\n    let expl_type;\r\n\r\n    const my = (selection) => {\r\n        // extract explanation information\r\n        const n_features = Object.keys(dataset_details[\"feature_names\"]).length;\r\n        const instance = explanation[\"instance\"];\r\n        const region = explanation[\"region\"];\r\n        // add a bounding rectangle\r\n        const bbox_width = width - 20;\r\n        const bbox_height = height - 20;\r\n        const bbox_x = 10;\r\n        const bbox_y = 10;\r\n        const bbox_round = 3;\r\n        const bbox_stroke = \"black\";\r\n        const bbox_stroke_width = 0.5\r\n        const bbox_stroke_opacity = 0.4\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"bbox\")\r\n            .attr(\"width\", bbox_width)\r\n            .attr(\"id\", \"bbox\")\r\n            .attr(\"height\", bbox_height)\r\n            .attr(\"fill\", rect_values.fill)\r\n            .attr(\"x\", bbox_x)\r\n            .attr(\"y\", bbox_y)\r\n            .attr(\"rx\", bbox_round)\r\n            .attr(\"ry\", bbox_round)\r\n            .attr(\"stroke\", bbox_stroke)\r\n            .attr(\"stroke-width\", bbox_stroke_width)\r\n            .attr(\"stroke-opacity\", bbox_stroke_opacity)\r\n\r\n        // ####################################### SIDEBAR CONTENT #######################################\r\n\r\n        const sidebar_width_ratio = 0.33;\r\n        const sidebar_margin = 10;\r\n        const sidebar_width = bbox_width * sidebar_width_ratio;\r\n        const sidebar_height = bbox_height - (sidebar_margin * 2);\r\n        const sidebar_x = bbox_x + sidebar_margin;\r\n        const sidebar_y = bbox_y + sidebar_margin;\r\n        const sidebar = sideBar()\r\n            .width(sidebar_width)\r\n            .height(sidebar_height)\r\n            .x(sidebar_x)\r\n            .y(sidebar_y)\r\n            .explanation(explanation)\r\n            .dataset_details(dataset_details)\r\n            .readable(readable);\r\n        selection.call(sidebar);\r\n\r\n        // ####################################### FUNCTION LIBRARY #######################################\r\n\r\n        function get_feature_name(feature_i) {\r\n            const feature_id = \"x\" + feature_i;\r\n            const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n            const pretty_feature_name = readable[\"pretty_feature_names\"][feature_name];\r\n            return pretty_feature_name\r\n        }\r\n\r\n        const RangeTypes = {\r\n            DataSet: \"dataset\", // use min/max value from dataset\r\n            StdDev: \"stddev\", // use +/- 1 s.d. from the value\r\n            Percent: \"percent\", // use a percentage increase\r\n        };\r\n        const range_type_min = RangeTypes.Percent;\r\n        const range_type_max = RangeTypes.Percent;\r\n        const percent_val = 0.25;\r\n\r\n        function get_line_low(value, feature_id) {\r\n            // select the bar min value\r\n            var min_value;\r\n            if (range_type_min == RangeTypes.DataSet) {\r\n                min_value = dataset_details[\"min_values\"][feature_id];\r\n            } else if (range_type_min == RangeTypes.StdDev) {\r\n                min_value = value - dataset_details[\"std_dev\"][feature_id];\r\n            } else if (range_type_min == RangeTypes.Percent) {\r\n                min_value = value - (percent_val * value);\r\n            }\r\n            min_value = clamp_value(min_value, feature_id, readable, dataset_details);\r\n            return min_value;\r\n        }\r\n\r\n        function get_line_high(value, feature_id) {\r\n            // select the bar max value\r\n            var max_value;\r\n            if (range_type_max == RangeTypes.DataSet) {\r\n                max_value = dataset_details[\"max_values\"][feature_id];\r\n            } else if (range_type_max == RangeTypes.StdDev) {\r\n                max_value = value + dataset_details[\"std_dev\"][feature_id];\r\n            }\r\n            else if (range_type_max == RangeTypes.Percent) {\r\n                max_value = value + (percent_val * value);\r\n            }\r\n            max_value = clamp_value(max_value, feature_id, readable, dataset_details);\r\n            return max_value;\r\n        }\r\n\r\n        function pixel_scale(value, min_value, max_value) {\r\n            var clamped_val = value;\r\n            clamped_val = Math.min(clamped_val, max_value);\r\n            clamped_val = Math.max(clamped_val, min_value);\r\n            return ((clamped_val - min_value) / (max_value - min_value)) * line_plot_width;\r\n        }\r\n\r\n        // ####################################### EXPLANATION BOX #######################################\r\n\r\n        // add a containing box for the explanation\r\n        const ebox_width_ratio = 1 - sidebar_width_ratio;\r\n        const ebox_width = (bbox_width * ebox_width_ratio) - 3 * sidebar_margin;\r\n        const ebox_height = bbox_height - (sidebar_margin * 2);\r\n        const ebox_x = bbox_x + (sidebar_width_ratio * bbox_width) + (2 * sidebar_margin);\r\n        const ebox_y = bbox_y + sidebar_margin;\r\n        selection.append(\"rect\")\r\n            .attr(\"id\", \"ebox\")\r\n            .attr(\"width\", ebox_width)\r\n            .attr(\"height\", ebox_height)\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"x\", ebox_x)\r\n            .attr(\"y\", ebox_y)\r\n            .attr(\"rx\", rect_values.round)\r\n            .attr(\"ry\", rect_values.round)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", rect_values.stroke_width)\r\n            .attr(\"stroke-linejoin\", \"round\");\r\n\r\n        // add header bar\r\n        const header_line_y = ebox_y + 50\r\n        const ebox_padding = 15\r\n        selection.append(\"line\")\r\n            .attr(\"x1\", ebox_x + ebox_padding)\r\n            .attr(\"x2\", ebox_x + ebox_width - ebox_padding)\r\n            .attr(\"y1\", header_line_y)\r\n            .attr(\"y2\", header_line_y)\r\n            .attr(\"stroke\", rect_values.stroke)\r\n            .attr(\"stroke-width\", 2);\r\n\r\n        // Current status (rejected)\r\n        var bad_header = selection.append(\"text\")\r\n            .attr(\"x\", ebox_x + ebox_padding + 5)\r\n            .attr(\"y\", header_line_y - 10)\r\n            .attr(\"class\", \"feature-details\")\r\n            .attr(\"class\", \"table-header\")\r\n            .attr(\"font-size\", 16)\r\n            .attr(\"font-style\", \"bold\")\r\n            .attr(\"fill\", \"black\")\r\n        bad_header.append(\"tspan\")\r\n            .text(readable[\"scenario_terms\"][\"instance_name\"] + \" (\")\r\n        bad_header.append(\"tspan\")\r\n            .text(readable[\"scenario_terms\"][\"undesired_outcome\"])\r\n            .attr(\"fill\", expl_colors.undesired);\r\n        bad_header.append(\"tspan\")\r\n            .text(\")\")\r\n            .attr(\"fill\", \"black\");\r\n\r\n        // explanation status (accepted)\r\n        var good_header = selection.append(\"text\")\r\n            .attr(\"x\", ebox_x + ebox_width - ebox_padding - 5)\r\n            .attr(\"y\", header_line_y - 10)\r\n            .attr(\"class\", \"feature-details\")\r\n            .attr(\"class\", \"table-header\")\r\n            .attr(\"font-size\", 16)\r\n            .attr(\"font-style\", \"bold\")\r\n            .attr(\"fill\", \"black\")\r\n            .attr(\"text-anchor\", \"end\")\r\n        good_header.append(\"tspan\")\r\n            .text(\"Explanation (\")\r\n        good_header.append(\"tspan\")\r\n            .text(readable[\"scenario_terms\"][\"desired_outcome\"])\r\n            .attr(\"fill\", expl_colors.desired);\r\n        good_header.append(\"tspan\")\r\n            .text(\")\")\r\n            .attr(\"fill\", \"black\");\r\n\r\n        // compute the unscaled distance along each dimension\r\n        const [feature_distances, idx_order] = feature_dists_order(instance, region);\r\n\r\n        const labels_x = ebox_x + 10;\r\n        const labels_width = 150;\r\n        const line_plot_pad_x = 10;\r\n        const line_plot_pad_y = 100;\r\n        const line_plot_x = labels_x + labels_width + line_plot_pad_x;\r\n        const line_plot_width = 290;\r\n        const line_spacing = 55;\r\n        const line_width = 1;\r\n        const tick_height = 10;\r\n        const bar_height = tick_height - 2;\r\n        const circle_radius = bar_height / 2;\r\n        const value_font = 12;\r\n\r\n        for (let i = 0; i < n_features; i++) { // for each feature\r\n            const feature_id = \"x\" + idx_order[i];\r\n            const feature_name = dataset_details[\"feature_names\"][feature_id];\r\n\r\n            // ##### DRAW THE NUMBER LINE #####\r\n\r\n            // draw a number line for this feature\r\n            const line_y = ebox_y + line_plot_pad_y + line_spacing * i;\r\n            selection.append(\"line\")\r\n                .attr(\"x1\", line_plot_x)\r\n                .attr(\"x2\", line_plot_x + line_plot_width)\r\n                .attr(\"y1\", line_y)\r\n                .attr(\"y2\", line_y)\r\n                .attr(\"stroke\", rect_values.stroke)\r\n                .attr(\"stroke-width\", line_width);\r\n\r\n            // add a text label for the line\r\n            selection.append(\"text\")\r\n                .text(get_feature_name(idx_order[i]) + \":\")\r\n                .attr(\"x\", labels_x + labels_width)\r\n                .attr(\"y\", line_y + (tick_height / 2))\r\n                .attr(\"class\", \"feature-details\")\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"text-anchor\", \"end\");\r\n            // add ticks to the ends of the line and label them\r\n            selection.append(\"line\")\r\n                .attr(\"x1\", line_plot_x)\r\n                .attr(\"x2\", line_plot_x)\r\n                .attr(\"y1\", line_y - tick_height / 2)\r\n                .attr(\"y2\", line_y + tick_height / 2)\r\n                .attr(\"stroke\", rect_values.stroke)\r\n                .attr(\"stroke-width\", line_width);\r\n            selection.append(\"line\")\r\n                .attr(\"x1\", line_plot_x + line_plot_width)\r\n                .attr(\"x2\", line_plot_x + line_plot_width)\r\n                .attr(\"y1\", line_y - tick_height / 2)\r\n                .attr(\"y2\", line_y + tick_height / 2)\r\n                .attr(\"stroke\", rect_values.stroke)\r\n                .attr(\"stroke-width\", line_width);\r\n\r\n\r\n            // determine how to scale the numberline\r\n            const instance_val = unscale(instance[feature_id], feature_id, dataset_details);\r\n            const region_lower = unscale(region[feature_id][0], feature_id, dataset_details);\r\n            const region_upper = unscale(region[feature_id][1], feature_id, dataset_details);\r\n\r\n            const has_change = feature_distances[idx_order[i]] > 0;\r\n\r\n\r\n            var example_val = instance_val;\r\n            if (expl_type == ExplanationTypes.Example) {\r\n                if (has_change) {\r\n                    var offset = unscale(OFFSET_UNSCALED, feature_id, dataset_details);\r\n                    example_val = create_example(instance_val, region_lower, region_upper, offset);\r\n                }\r\n            }\r\n\r\n            var min_plot_value;\r\n            var max_plot_value;\r\n            if (expl_type == ExplanationTypes.Region) {\r\n                min_plot_value = Math.min(instance_val, region_lower);\r\n                max_plot_value = Math.max(instance_val, region_upper);\r\n            }\r\n            else if (expl_type == ExplanationTypes.Example) {\r\n                min_plot_value = Math.min(instance_val, example_val);\r\n                max_plot_value = Math.max(instance_val, example_val);\r\n                if (max_plot_value == 0) {\r\n                    max_plot_value = 0.5 * region_upper;\r\n                }\r\n            }\r\n\r\n            const line_min = get_line_low(min_plot_value, feature_id);\r\n            const line_max = get_line_high(max_plot_value, feature_id);\r\n\r\n            const bar_lower_val = Math.max(region_lower, line_min);\r\n            const bar_upper_val = Math.min(region_upper, line_max);\r\n\r\n            // label the ends of the line\r\n            const line_text_lower = selection.append(\"text\")\r\n                .text(pretty_value(line_min, feature_name, readable))\r\n                .attr(\"font-size\", value_font)\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"x\", line_plot_x)\r\n                .attr(\"y\", line_y + bar_height + value_font)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"class\", \"tick-label\");\r\n            const line_text_upper = selection.append(\"text\")\r\n                .text(pretty_value(line_max, feature_name, readable))\r\n                .attr(\"font-size\", value_font)\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"x\", line_plot_x + line_plot_width)\r\n                .attr(\"y\", line_y + bar_height + value_font)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"class\", \"tick-label\");\r\n\r\n            // ########## EXPLANTION CONTENT ##########\r\n\r\n\r\n\r\n            // ##### DRAW THE BAR #####\r\n            if (expl_type == ExplanationTypes.Region) {\r\n                // add a bar for the region range\r\n                const lower_px = pixel_scale(region_lower, line_min, line_max)\r\n                const upper_px = pixel_scale(region_upper, line_min, line_max)\r\n                const bar_color = has_change ? expl_colors.altered_good : expl_colors.unaltered;\r\n                const bar_width_px = upper_px - lower_px\r\n                const bar_start_px = line_plot_x + lower_px;\r\n                const bar_end_px = bar_start_px + bar_width_px;\r\n                selection.append(\"rect\")\r\n                    .attr(\"x\", bar_start_px)\r\n                    .attr(\"y\", line_y - (bar_height / 2))\r\n                    .attr(\"width\", bar_width_px, feature_id)\r\n                    .attr(\"height\", bar_height)\r\n                    .attr(\"fill\", bar_color);\r\n\r\n                // add ticks to the ends of the bar\r\n                selection.append(\"line\")\r\n                    .attr(\"x1\", bar_start_px)\r\n                    .attr(\"x2\", bar_start_px)\r\n                    .attr(\"y1\", line_y - tick_height / 2)\r\n                    .attr(\"y2\", line_y + tick_height / 2)\r\n                    .attr(\"stroke\", rect_values.stroke)\r\n                    .attr(\"stroke-width\", line_width);\r\n                selection.append(\"line\")\r\n                    .attr(\"x1\", bar_end_px)\r\n                    .attr(\"x2\", bar_end_px)\r\n                    .attr(\"y1\", line_y - tick_height / 2)\r\n                    .attr(\"y2\", line_y + tick_height / 2)\r\n                    .attr(\"stroke\", rect_values.stroke)\r\n                    .attr(\"stroke-width\", line_width);\r\n\r\n                // label the ends of the bar\r\n                const bar_text_lower = selection.append(\"text\")\r\n                    .text(pretty_value(bar_lower_val, feature_name, readable))\r\n                    .attr(\"font-size\", value_font)\r\n                    .attr(\"fill\", bar_color)\r\n                    .attr(\"x\", bar_start_px)\r\n                    .attr(\"y\", line_y - bar_height)\r\n                    .attr(\"text-anchor\", \"end\")\r\n                    .attr(\"class\", \"tick-label\");\r\n                const bar_text_upper = selection.append(\"text\")\r\n                    .text(pretty_value(bar_upper_val, feature_name, readable))\r\n                    .attr(\"font-size\", value_font)\r\n                    .attr(\"fill\", bar_color)\r\n                    .attr(\"x\", bar_end_px)\r\n                    .attr(\"y\", line_y - bar_height)\r\n                    .attr(\"text-anchor\", \"start\")\r\n                    .attr(\"class\", \"tick-label\");\r\n\r\n                // if we have space for the text, center the bar end labels on the ticks\r\n                const lower_text_width = bar_text_lower.node().getComputedTextLength();\r\n                const upper_text_width = bar_text_upper.node().getComputedTextLength();\r\n                if (bar_width_px > ((lower_text_width / 2) + (upper_text_width / 2) + 10)) {\r\n                    bar_text_lower.attr(\"text-anchor\", \"middle\");\r\n                    bar_text_upper.attr(\"text-anchor\", \"middle\");\r\n                }\r\n            }\r\n            // ##### OR DRAW THE EXAMPLE CIRCLE #####\r\n            else if (expl_type == ExplanationTypes.Example) {\r\n                if (has_change) {\r\n                    var offset = unscale(OFFSET_UNSCALED, feature_id, dataset_details);\r\n                    // const example_val = create_example(instance_val, bar_lower_val, bar_upper_val, offset);\r\n                    const expl_circle_x = line_plot_x + pixel_scale(example_val, line_min, line_max);\r\n                    // draw the circle\r\n                    selection.append(\"circle\")\r\n                        .attr(\"cx\", expl_circle_x)\r\n                        .attr(\"cy\", line_y)\r\n                        .attr(\"r\", circle_radius)\r\n                        .attr(\"fill\", expl_colors.altered_good);\r\n                    // add a text label\r\n                    selection.append(\"text\")\r\n                        .text(pretty_value(example_val, feature_name, readable))\r\n                        .attr(\"font-size\", value_font)\r\n                        .attr(\"fill\", expl_colors.altered_good)\r\n                        .attr(\"x\", expl_circle_x)\r\n                        .attr(\"y\", line_y - bar_height)\r\n                        .attr(\"text-anchor\", \"middle\")\r\n                        .attr(\"class\", \"tick-label\");\r\n                }\r\n            }\r\n\r\n            // ##### DRAW THE INSTANCE CIRCLE #####\r\n\r\n            // add a circle for the instance value\r\n            const unaltered_color = expl_type == ExplanationTypes.Region ? \"black\" : expl_colors.unaltered;\r\n            const circle_color = has_change ? expl_colors.altered_bad : unaltered_color;\r\n            const circle_x = line_plot_x + pixel_scale(instance_val, line_min, line_max)\r\n            selection.append(\"circle\")\r\n                .attr(\"cx\", circle_x)\r\n                .attr(\"cy\", line_y)\r\n                .attr(\"r\", circle_radius)\r\n                .attr(\"fill\", circle_color);\r\n\r\n            // add text label for instance circle\r\n            const circle_text = selection.append(\"text\")\r\n                .text(pretty_value(instance_val, feature_name, readable))\r\n                .attr(\"font-size\", value_font)\r\n                .attr(\"fill\", circle_color)\r\n                .attr(\"x\", circle_x)\r\n                .attr(\"y\", line_y + bar_height + value_font)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"class\", \"tick-label\");\r\n            // check if the instance's text label will overlap the text label from either end of the line\r\n            if (instance_val != line_min && instance_val != line_max) {\r\n                // get the size of the rendered text elements\r\n                const line_lower_text_px = line_text_lower.node().getComputedTextLength() / 2;\r\n                const line_upper_text_px = line_text_lower.node().getComputedTextLength() / 2;\r\n                const circle_text_px = circle_text.node().getComputedTextLength() / 2;\r\n                // compute the start/end of the upper/lower line text labels\r\n                const line_text_up_start = line_plot_x + line_plot_width - line_upper_text_px;\r\n                const line_text_low_end = line_plot_x + line_lower_text_px;\r\n                // compute the size of the overlap\r\n                const text_gap_up = line_text_up_start - (circle_x + circle_text_px)\r\n                const text_gap_low = (circle_x - circle_text_px) - line_text_low_end\r\n                // if there are fewer than 10 pixels between the text elements, adjust the text position\r\n                const buffer_size = 10;\r\n                if (text_gap_up < buffer_size) {\r\n                    const adjusted_x = line_text_up_start - circle_text_px - buffer_size\r\n                    circle_text.attr(\"x\", adjusted_x)\r\n                }\r\n                if (text_gap_low < buffer_size) {\r\n                    const adjusted_x = line_text_low_end + circle_text_px + buffer_size\r\n                    circle_text.attr(\"x\", adjusted_x)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    my.width = function (_) {\r\n        return arguments.length\r\n            ? ((width = +_), my)\r\n            : width;\r\n    };\r\n\r\n    my.height = function (_) {\r\n        return arguments.length\r\n            ? ((height = +_), my)\r\n            : height;\r\n    };\r\n\r\n    my.x = function (_) {\r\n        return arguments.length\r\n            ? ((x = +_), my)\r\n            : x;\r\n    };\r\n\r\n    my.y = function (_) {\r\n        return arguments.length\r\n            ? ((y = +_), my)\r\n            : y;\r\n    };\r\n\r\n    my.explanation = function (_) {\r\n        return arguments.length ? ((explanation = _), my) : explanation;\r\n    };\r\n\r\n    my.dataset_details = function (_) {\r\n        return arguments.length ? ((dataset_details = _), my) : dataset_details;\r\n    };\r\n\r\n    my.readable = function (_) {\r\n        return arguments.length ? ((readable = _), my) : readable;\r\n    };\r\n\r\n    my.expl_type = function (_) {\r\n        return arguments.length ? ((expl_type = _), my) : expl_type;\r\n    };\r\n\r\n    return my;\r\n}","// group import d3 functions\r\nconst {\r\n    json,\r\n    select,\r\n} = d3;\r\n\r\nimport { save } from \"./d3-save-svg.js\";\r\nimport { liguisticDisplay } from \"./linguisticDisplay.js\";\r\nimport { numericDisplay } from \"./numericDisplay.js\";\r\nimport { ExplanationTypes } from \"./values.js\";\r\nimport { visualDisplay } from \"./visualDisplay.js\";\r\n\r\n// data source url\r\nconst detailsURL = \"/visualization/data/dataset_details.json\";\r\n\r\nconst DisplayTypes = Object({\r\n    Numeric: \"numeric\",\r\n    Linguistic: \"linguistic\",\r\n    Visual: \"visual\"\r\n})\r\n\r\n// main rendering function\r\nconst main = async () => {\r\n    // ####################################### DATA LOADING #######################################\r\n\r\n    // load the dataset details\r\n    const dataset_details = await json(detailsURL);\r\n\r\n    // load the paths to the explanations JSON.\r\n    const explanation_paths = await json(\"/visualization/data/explanation_paths.json\");\r\n\r\n    // load the explanation and isolate the instance and the region. Note we use +/-100000000000000 for +/-Infinity\r\n    var explanation_id = 0;\r\n    var explanation = await json(explanation_paths[explanation_id]);\r\n    var current_expl_type = ExplanationTypes.Region;\r\n\r\n    // load human readable info for the dataset\r\n    const readableURL = \"/visualization/data/human_readable_details.json\"\r\n    const readable = await json(readableURL);\r\n\r\n    // ####################################### RENDER EXPLANATION #######################################\r\n\r\n    select('#instance-counter')\r\n        .text(\"Instance \" + explanation_id);\r\n\r\n    const width = 800;\r\n    const height = 375;\r\n    const svg = select('#svg_container').append(\"svg\")\r\n        .attr('width', width)\r\n        .attr('height', height)\r\n        .attr(\"fill\", \"white\")\r\n        .attr(\"id\", \"image_svg\");\r\n\r\n    const numeric_display = numericDisplay()\r\n        .width(width)\r\n        .height(height)\r\n        .explanation(explanation)\r\n        .dataset_details(dataset_details)\r\n        .readable(readable)\r\n        .expl_type(current_expl_type);\r\n    const linguistic_display = liguisticDisplay()\r\n        .width(width)\r\n        .height(height)\r\n        .explanation(explanation)\r\n        .dataset_details(dataset_details)\r\n        .readable(readable)\r\n        .expl_type(current_expl_type);\r\n    const visual_display = visualDisplay()\r\n        .width(width)\r\n        .height(height)\r\n        .explanation(explanation)\r\n        .dataset_details(dataset_details)\r\n        .readable(readable)\r\n        .expl_type(current_expl_type);\r\n\r\n    var current_display = DisplayTypes.Numeric;\r\n    update_display(current_display);\r\n\r\n    // ####################################### BUTTON CONTROLS #######################################\r\n\r\n    function update_display(dtype) {\r\n        if (dtype) { current_display = dtype }\r\n        // clear the SVG and render the new display\r\n        svg.selectAll(\"*\").remove();\r\n        if (current_display == DisplayTypes.Numeric) {\r\n            svg.call(numeric_display);\r\n        } else if (current_display == DisplayTypes.Linguistic) {\r\n            svg.call(linguistic_display);\r\n        }\r\n        else if (current_display == DisplayTypes.Visual) {\r\n            svg.call(visual_display);\r\n        }\r\n    }\r\n\r\n    async function update_explantion() {\r\n        explanation = await json(explanation_paths[explanation_id]);\r\n        // update all the displays\r\n        numeric_display.explanation(explanation)\r\n        linguistic_display.explanation(explanation)\r\n        visual_display.explanation(explanation)\r\n        // clear the SVG and render the correct display\r\n        update_display();\r\n    }\r\n\r\n    function update_expl_type(etype) {\r\n        current_expl_type = etype;\r\n        // update all the displays\r\n        numeric_display.expl_type(etype)\r\n        linguistic_display.expl_type(etype)\r\n        visual_display.expl_type(etype)\r\n        // clear the SVG and render the correct display\r\n        update_display();\r\n    }\r\n\r\n    // numeric button\r\n    d3.select('button#numeric').on('click', function () {\r\n        update_display(DisplayTypes.Numeric);\r\n    });\r\n\r\n    // linguistic button\r\n    d3.select('button#linguistic').on('click', function () {\r\n        update_display(DisplayTypes.Linguistic);\r\n    });\r\n\r\n    // visual button\r\n    d3.select('button#visual').on('click', function () {\r\n        update_display(DisplayTypes.Visual);\r\n    });\r\n\r\n    // example button\r\n    d3.select('button#example').on('click', function () {\r\n        update_expl_type(ExplanationTypes.Example);\r\n    });\r\n\r\n    // region button\r\n    d3.select('button#region').on('click', function () {\r\n        update_expl_type(ExplanationTypes.Region);\r\n    });\r\n\r\n    function execute_save() {\r\n        var config = {\r\n            filename: 'explanation_' + String(explanation_id).padStart(3, 0) + \"_\" + current_display + \"_\" + current_expl_type,\r\n        }\r\n        save(d3.select('svg').node(), config);\r\n    }\r\n\r\n    // save button\r\n    d3.select('button#export').on('click', function () {\r\n        execute_save();\r\n    });\r\n\r\n    // previous button\r\n    d3.select('button#previous').on('click', async function () {\r\n        if (explanation_id > 0) {\r\n            explanation_id -= 1\r\n            select('#instance-counter')\r\n                .text(\"Instance \" + explanation_id);\r\n            update_explantion();\r\n        }\r\n    });\r\n\r\n    // next button\r\n    d3.select('button#next').on('click', function () {\r\n        if (explanation_id < explanation_paths.length - 1) {\r\n            explanation_id += 1\r\n            select('#instance-counter')\r\n                .text(\"Instance \" + explanation_id);\r\n            update_explantion();\r\n        }\r\n    });\r\n\r\n    // save all button\r\n    d3.select('button#save-all').on('click', function () {\r\n        // store the current display + type\r\n        const prev_style = current_display;\r\n        const prev_type = current_expl_type;\r\n\r\n        // save each style and display to an SVG \r\n        const viz_styles = [DisplayTypes.Numeric, DisplayTypes.Linguistic, DisplayTypes.Visual];\r\n        const expl_types = [ExplanationTypes.Example, ExplanationTypes.Region];\r\n\r\n        for (let i = 0; i < viz_styles.length; i++) {\r\n            const style = viz_styles[i];\r\n            current_display = style;\r\n            update_display(style);\r\n            for (let j = 0; j < expl_types.length; j++) {\r\n                const type = expl_types[j];\r\n                current_expl_type = type;\r\n                update_expl_type(type);\r\n                execute_save();\r\n            }\r\n        }\r\n\r\n        // restore the display + type\r\n        current_display = prev_style;\r\n        current_expl_type = prev_type;\r\n    });\r\n\r\n}\r\n\r\nmain();"],"names":["const","let","i","feature_id","feature_name","feature_value","lower_value_text","lower_value","upper_value_text","upper_value","range_text","adjusted_x"],"mappings":"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"}