from explainers.explainer import Explainer
import numpy as np

import networkx as nx
from networkx.algorithms.approximation import clique

from utilities.metrics import dist_euclidean
from utilities.metrics import dist_features_changed
from utilities.tree_tools import compute_jaccard_pair


class FACETTrees(Explainer):
    def __init__(self, model, hyperparameters=None):
        self.model = model

        self.parse_hyperparameters(hyperparameters)
        self.build_graph()

    def build_graph(self):
        '''
        Build a graph which reprsents the forest and find the maximum clique of this graph as trees to explain.

        Each tree in the forest is reprsented by a graph node with an edge placed between then if they are guaranteed to generate examples which are alwys synthesizable. 
        '''
        # build a graph to represent the feature similarities between trees
        rf_detector = self.model.detectors[0]
        trees = rf_detector.get_trees()

        adjacency = self.compute_adjacency(trees)
        adjacency = np.floor(adjacency)  # consider only fully disjoint trees for merging

        # create a graph from the adjacency matrix using networkx
        self.G = nx.Graph(adjacency)

        # identify the largest set of trees which are fully disjoint in the features they use this is done by finding the largest complete (i.e. fully connectected) subgraph
        # returns a set of node indices representing trees in the forest
        self.fully_disjoint_trees = list(clique.max_clique(self.G))
        n_majority = (int)(np.floor(rf_detector.ntrees / 2) + 1)
        self.trees_to_explain = self.fully_disjoint_trees[:n_majority]

    def compute_adjacency(self, trees):
        '''
        Treating the trees in the forest as a graph, with each tree being a node, define an edge as weight 1.0 between two trees if they use a fully disjoint set of features as 0.0 if they use exactly the same set of features

        Returns
        -------
        adjacency : a matrix of shape [ntrees, ntrees] with each element adjacency[i][j] representing the weight of the edge in a graph between nodes i and j. The diagonal of the matrix is set to zero to prevent loops
        '''
        ntrees = len(trees)

        # Build matrix for tree subset similarity using jaccard index
        similarity = np.zeros(shape=(ntrees, ntrees))

        for i in range(ntrees):
            for k in range(i+1, ntrees):
                jik = compute_jaccard_pair(trees[i], trees[k])
                similarity[i][k] = jik
                similarity[k][i] = jik

        adjacency = (1.0 - similarity)
        np.fill_diagonal(adjacency, 0)  # remove self edges

        return adjacency

    def explain(self, x, y):
        '''
        A method for explaining the samples in x by finding the best candidate contrastive examples generated by the model's detectors

        Parameters
        ----------
        x               : an array of samples, dimensions (nsamples, nfeatures)
        y               : an array of labels which correspond to the labels, (nsamples, )

        Returns
        -------
        best_examples : an array of contrastive examples with dimensions (nsamples, nfeatures). Each of final_examples[i] corresponds to
        the best examples which explains x[i] from those suggested by the detectors
        '''
        # !WARNING : This method only defined for an ensemble containing only a single random forest detector
        rf_detector = self.model.detectors[0]
        xprime = x.copy()  # an array for the constructed contrastive examples

        # get a candidate contrastive example for each sample from each of the disjoint trees
        candidates = rf_detector.get_candidate_examples_treewise(x, y, self.trees_to_explain)

        i = 0
        for i in range(len(self.trees_to_explain)):
            tree_id = self.trees_to_explain[i]

            # merge the examples from each tree into xprime, taking only the features which that tree used
            features_used = rf_detector.get_features_used(tree_id)
            xprime[:, features_used] = candidates[i, :, features_used].T
            i += 1

        preds = self.model.predict(xprime)
        failed_explanation = (preds == y)
        xprime[failed_explanation] = np.tile(np.inf, x.shape[1])

        return xprime

    def get_clique(self):
        return self.fully_disjoint_trees

    def parse_hyperparameters(self, hyperparameters):
        self.hyperparameters = hyperparameters

        # distance metric for explanation
        if hyperparameters.get("expl_distance") is None:
            print("No expl_distance function set, using Euclidean")
            self.distance_fn = dist_euclidean
        elif hyperparameters.get("expl_distance") == "Euclidean":
            self.distance_fn = dist_euclidean
        elif hyperparameters.get("expl_distance") == "FeaturesChanged":
            self.distance_fn = dist_features_changed
        else:
            print("Unknown expl_distance function {}, using Euclidean distance".format(hyperparameters.get("expl_distance")))
            self.distance_fn = dist_euclidean

        # greedy sythesis
        if hyperparameters.get("expl_greedy") is None:
            print("No expl_greedy set, defaulting to False")
            self.greedy = False
        else:
            self.greedy = hyperparameters.get("expl_greedy")

        # graph type
        graph_type = hyperparameters.get("facet_graphtype")
        if graph_type is None:
            print("facet_graphtype is not set, defaulting to disjoint")
            self.graph_type = "Disjoint"
        elif graph_type == "Disjoint" or graph_type == "NonDisjoint":
            self.graph_type = graph_type
        else:
            print("unknown facet_graphtype, defaulting to Disjoint")
            self.graph_type = "Disjoint"
