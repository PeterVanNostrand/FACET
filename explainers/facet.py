from numpy.core.numeric import full
from explainers.explainer import Explainer
from sklearn.ensemble import IsolationForest as skIsolationForest
import numpy as np

import networkx as nx
from networkx.algorithms.approximation import clique

from utilities.metrics import dist_euclidean
from utilities.metrics import dist_features_changed
from utilities.tree_tools import compute_jaccard_pair

import matplotlib.pyplot as plt
from sklearn import tree


class FACET(Explainer):
    def __init__(self, model, hyperparameters=None):
        self.model = model

        self.parse_hyperparameters(hyperparameters)
        self.build_graph()

    def build_graph(self):
        if self.graph_type == "Disjoint":
            self.build_disjoint_graph()
        else:
            self.build_nondisjoint_graph()

    def explain(self, x, y):
        '''
        A method for explaining the samples in x by finding the best candidate contrastive examples generated by the model's detectors

        Parameters
        ----------
        x               : an array of samples, dimensions (nsamples, nfeatures)
        y               : an array of labels which correspond to the labels, (nsamples, )

        Returns
        -------
        best_examples : an array of contrastive examples with dimensions (nsamples, nfeatures). Each of final_examples[i] corresponds to
        the best examples which explains x[i] from those suggested by the detectors
        '''
        if self.graph_type == "Disjoint":
            return self.explain_disjoint(x, y)
        else:
            return self.explain_nondisjoint

    def explain_disjoint(self, x, y):
        # !WARNING : This method only defined for an ensemble containing only a single random forest detector
        rf_detector = self.model.detectors[0]
        xprime = x.copy()  # an array for the constructed contrastive examples

        # get a candidate contrastive example for each sample from each of the disjoint trees
        candidates = rf_detector.get_candidate_examples_treewise(x, y, self.trees_to_explain)

        i = 0
        for i in range(len(self.trees_to_explain)):
            tree_id = self.trees_to_explain[i]

            # merge the examples from each tree into xprime, taking only the features which that tree used
            features_used = rf_detector.get_features_used(tree_id)
            xprime[:, features_used] = candidates[i, :, features_used].T
            i += 1

        preds = self.model.predict(xprime)
        failed_explanation = (preds == y)
        xprime[failed_explanation] = np.tile(np.inf, x.shape[1])

        return xprime

    def build_disjoint_graph(self):
        # build a graph to represent the feature similarities between trees
        rf_detector = self.model.detectors[0]
        adjacency = self.compute_disjoint_adjacency(rf_detector)
        adjacency = np.floor(adjacency)  # consider only fully disjoint trees for merging

        # create a graph from the adjacency matrix using networkx
        self.G = nx.Graph(adjacency)

        # identify the largest set of trees which are fully disjoint in the features they use this is done by finding the largest complete (i.e. fully connectected) subgraph
        # returns a set of node indices representing trees in the forest
        self.fully_disjoint_trees = list(clique.max_clique(self.G))
        n_majority = (int)(np.floor(rf_detector.ntrees / 2) + 1)
        self.trees_to_explain = self.fully_disjoint_trees[:n_majority]

    def build_nondisjoint_graph(self):
        rf_detector = self.model.detectors[0]
        adjacency = self.compute_nondisjoint_adjacency(rf_detector)
        adjacency = np.floor(adjacency)  # consider only fully disjoint trees for merging

        # create a graph from the adjacency matrix using networkx
        self.G = nx.Graph(adjacency)

        # identify the largest set of trees which are fully disjoint in the features they use this is done by finding the largest complete (i.e. fully connectected) subgraph
        # returns a set of node indices representing trees in the forest
        self.fully_disjoint_trees = list(clique.max_clique(self.G))
        n_majority = (int)(np.floor(rf_detector.ntrees / 2) + 1)
        self.trees_to_explain = self.fully_disjoint_trees[:n_majority]

    def explain_nondisjoint(self, x, y):
        pass

    def get_clique(self):
        return self.fully_disjoint_trees

    def parse_hyperparameters(self, hyperparameters):
        self.hyperparameters = hyperparameters

        # distance metric for explanation
        if hyperparameters.get("expl_distance") is None:
            print("No expl_distance function set, using Euclidean")
            self.distance_fn = dist_euclidean
        elif hyperparameters.get("expl_distance") == "Euclidean":
            self.distance_fn = dist_euclidean
        elif hyperparameters.get("expl_distance") == "FeaturesChanged":
            self.distance_fn = dist_features_changed
        else:
            print("Unknown expl_distance function {}, using Euclidean distance".format(hyperparameters.get("expl_distance")))
            self.distance_fn = dist_euclidean

        # greedy sythesis
        if hyperparameters.get("expl_greedy") is None:
            print("No expl_greedy set, defaulting to False")
            self.greedy = False
        else:
            self.greedy = hyperparameters.get("expl_greedy")

        # graph type
        graph_type = hyperparameters.get("facet_graphtype")
        if graph_type is None:
            print("facet_graphtype is not set, defaulting to disjoint")
            self.graph_type = "Disjoint"
        elif graph_type == "Disjoint" or graph_type == "NonDisjoint":
            self.graph_type = graph_type
        else:
            print("unknown facet_graphtype, defaulting to Disjoint")
            self.graph_type = "Disjoint"

    def compute_disjoint_adjacency(self, rf_detector):
        '''
        Treating the trees in the forest as a graph, with each tree being a node, define an edge as weight 1.0 between two trees if they use a fully disjoint set of features as 0.0 if they use exactly the same set of features

        Returns
        -------
        adjacency : a matrix of shape [ntrees, ntrees] with each element adjacency[i][j] representing the weight of the edge in a graph between nodes i and j. The diagonal of the matrix is set to zero to prevent loops 
        '''
        trees = rf_detector.model.estimators_
        ntrees = len(trees)

        # Build matrix for tree subset similarity using jaccard index
        similarity = np.zeros(shape=(ntrees, ntrees))

        for i in range(ntrees):
            for k in range(i+1, ntrees):
                jik = compute_jaccard_pair(trees[i], trees[k])
                similarity[i][k] = jik
                similarity[k][i] = jik

        adjacency = (1.0 - similarity)
        np.fill_diagonal(adjacency, 0)  # remove self edges

        return adjacency

    def compute_nondisjoint_adjacency(self, rf_detector):
        trees = rf_detector.model.estimators_
        ntrees = len(trees)

        # Build matrix for tree subset similarity using jaccard index
        adjacency = np.zeros(shape=(ntrees, ntrees))
        all_collisions = []
        total_paths = 0
        total_path_pairs = 0

        for i in range(ntrees):
            for k in range(i+1, ntrees):
                t1 = trees[i]
                t2 = trees[k]
                f1 = t1.feature_importances_
                f2 = t2.feature_importances_

                shared_features = (f1 > 0) & (f2 > 0)

                # if shared_features.sum() == 0:
                #     adjacency[i][k] = 1
                #     adjacency[k][i] = 1
                # else:
                collision_paths, n_paths, n_path_pairs = self.check_resolveable(t1, t2, shared_features)
                total_paths += n_paths
                total_path_pairs += n_path_pairs

                if shared_features.sum() > 0:
                    all_collisions.append(collision_paths)

        np.fill_diagonal(adjacency, 0)  # remove self edges
        collisions = np.vstack(all_collisions)

        return adjacency

    def check_resolveable(self, t1, t2, shared_features):
        nfeatures = len(shared_features)
        resolveable = [True] * nfeatures

        t1_paths = self.__in_order_path(t=t1, built_paths=[])
        t2_paths = self.__in_order_path(t2, built_paths=[])
        counter_class = 0

        # for a countefactual path in t1 which contains a shared feature
        # how many paths in t2 does it conflict with?
        collision_paths = []

        for feature_i in range(nfeatures):
            if shared_features[feature_i]:  # if the feature is shared
                for p1 in t1_paths:
                    if self.consider_path(p1, feature_i, counter_class):
                        n_overlap_paths = 0
                        for p2 in t2_paths:
                            if self.consider_path(p2, feature_i, counter_class):
                                n_overlap_paths += 1
                        collision_paths.append([feature_i, n_overlap_paths, len(t2_paths)])

        collision_paths_arr = np.array(collision_paths)
        n_paths = len(t1_paths)
        n_path_pairs = len(t1_paths) * len(t2_paths)
        return collision_paths_arr, n_paths, n_path_pairs

    def consider_path(self, p, feature, counter_class=1):
        pred_class = p[-1:, -1:][0][0]
        path_features = p[:, 1:2]
        return (pred_class == counter_class and feature in path_features)

    def save_tree_figs(self, t1, t2, path="C:/Users/Peter/Downloads/"):
        tree.plot_tree(t1)
        plt.savefig(path + "t1.png")
        tree.plot_tree(t2)
        plt.savefig(path + "t2.png")

    def __in_order_path(self, t, built_paths=[], node_id=0, path=[], path_string=""):
        '''
        An algorithm for pre-order binary tree traversal. This walks throuhg the entire tree generating a list of paths from the root node to a leaf
        and recording the final classification of the leaf node for that path. Paths are stored as `p = [f, g, h, i, j]` where each letter reprsents the
        node_id taken in that path, with `f` being the root node and `j` being the leaf node

        Parameters
        ----------
        t           : the decision tree classifier to travers
        built_paths : the return values, a list of tuples (`class_id` = integer class ID, `path=[f, g, h, i, j]`)
        node_id     : the `node_id` to start traversal at, defaults to root node of tree (`node_id=0`)
        path        : the starting path up to by not including the node referenced by `node_id`, defaults to empty
        path_string : a running text explanation of the features and values used to split along the path
        verbose     : when true prints `path_string` during execution, `default=False`

        Returns
        -------
        None : see the output parameter `built_paths`
        '''

        # build list of paths, each path is represented by a list of nodes
        # Each node is reprsented by a tuple. For internal nodes this is
        #     [node_id, feature, cond, threshold]
        # While for leaf nodes this is
        #     [node_id, -1, -1, class_id]
        # Where cond is 0 for (<= )and 1 for (>)

        # process current node
        feature = t.tree_.feature[node_id]
        if feature >= 0:  # this is an internal node
            threshold = t.tree_.threshold[node_id]

            # process left child, conditioned (<=)
            left_path = path.copy()
            left_path.append([node_id, feature, 0, threshold])
            self.__in_order_path(t=t, built_paths=built_paths, node_id=t.tree_.children_left[node_id], path=left_path)

            # process right node, conditioned (>)
            right_path = path.copy()
            right_path.append([node_id, feature, 1, threshold])
            self.__in_order_path(t=t, built_paths=built_paths, node_id=t.tree_.children_right[node_id], path=right_path)

            return built_paths

        else:  # this is a leaf node
            class_id = np.argmax(t.tree_.value[node_id])
            path = path.copy()
            path.append([node_id, -1, -1, class_id])

            # store the completed path and exit
            finished_path = np.array(path)
            built_paths.append(finished_path)
            return built_paths
